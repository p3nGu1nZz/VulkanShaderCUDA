#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer Input {
    float data[];
} input_tensor;

layout(std430, binding = 1) readonly buffer Kernel {
    float data[];
} kernel_tensor;

layout(std430, binding = 2) writeonly buffer Output {
    float data[];
} output_tensor;

layout(push_constant) uniform PushConstants {
    uint input_width;
    uint input_height;
    uint input_channels;
    uint output_channels;
    uint kernel_size;
    uint padding;
    uint stride;
} pc;

uint get_input_offset(uint n, uint c, uint h, uint w) {
    return ((n * pc.input_channels + c) * pc.input_height + h) * pc.input_width + w;
}

uint get_kernel_offset(uint out_c, uint in_c, uint kh, uint kw) {
    return ((out_c * pc.input_channels + in_c) * pc.kernel_size + kh) * pc.kernel_size + kw;
}

uint get_output_offset(uint n, uint c, uint h, uint w) {
    uint output_width = (pc.input_width + 2 * pc.padding - pc.kernel_size) / pc.stride + 1;
    uint output_height = (pc.input_height + 2 * pc.padding - pc.kernel_size) / pc.stride + 1;
    return ((n * pc.output_channels + c) * output_height + h) * output_width + w;
}

void main() {
    uint out_x = gl_GlobalInvocationID.x;
    uint out_y = gl_GlobalInvocationID.y;
    uint out_c = gl_GlobalInvocationID.z;

    uint output_width = (pc.input_width + 2 * pc.padding - pc.kernel_size) / pc.stride + 1;
    uint output_height = (pc.input_height + 2 * pc.padding - pc.kernel_size) / pc.stride + 1;

    if (out_x >= output_width || out_y >= output_height || out_c >= pc.output_channels) return;

    float sum = 0.0;

    for (uint in_c = 0; in_c < pc.input_channels; in_c++) {
        for (uint kh = 0; kh < pc.kernel_size; kh++) {
            for (uint kw = 0; kw < pc.kernel_size; kw++) {
                int in_h = int(out_y * pc.stride) + int(kh) - int(pc.padding);
                int in_w = int(out_x * pc.stride) + int(kw) - int(pc.padding);

                if (in_h >= 0 && in_h < int(pc.input_height) && in_w >= 0 && in_w < int(pc.input_width)) {
                    uint input_idx = get_input_offset(0, in_c, uint(in_h), uint(in_w));
                    uint kernel_idx = get_kernel_offset(out_c, in_c, kh, kw);

                    sum += input_tensor.data[input_idx] * kernel_tensor.data[kernel_idx];
                }
            }
        }
    }

    uint out_idx = get_output_offset(0, out_c, out_y, out_x);
    output_tensor.data[out_idx] = sum;
}
