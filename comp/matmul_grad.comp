#version 450
#extension GL_EXT_shader_atomic_float : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) readonly buffer GradOutput {
    float data[];
} grad_output;

layout(std430, binding = 1) readonly buffer InputA {
    float data[];
} input_a;

layout(std430, binding = 2) readonly buffer InputB {
    float data[];
} input_b;

layout(std430, binding = 3) buffer GradA {
    float data[];
} grad_a;

layout(std430, binding = 4) buffer GradB {
    float data[];
} grad_b;

layout(push_constant) uniform PushConstants {
    uint M; // Height of A
    uint K; // Width of A / Height of B
    uint N; // Width of B
} pc;

shared float shared_grad[16][16];
shared float shared_a[16][16];
shared float shared_b[16][16];

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    uint local_row = gl_LocalInvocationID.y;
    uint local_col = gl_LocalInvocationID.x;

    if (row >= pc.M || col >= pc.N) return;

    float grad = grad_output.data[row * pc.N + col];
    
    // Process in tiles to improve memory access patterns
    for (uint tile = 0; tile < (pc.K + 15) / 16; ++tile) {
        // Load data into shared memory
        if (tile * 16 + local_col < pc.K) {
            shared_a[local_row][local_col] = input_a.data[row * pc.K + tile * 16 + local_col];
        }
        if (tile * 16 + local_row < pc.K) {
            shared_b[local_row][local_col] = input_b.data[(tile * 16 + local_row) * pc.N + col];
        }
        
        barrier();
        
        // Compute gradients for this tile
        for (uint k = 0; k < 16 && tile * 16 + k < pc.K; ++k) {
            atomicAdd(grad_a.data[row * pc.K + tile * 16 + k], grad * shared_b[k][local_col]);
            atomicAdd(grad_b.data[(tile * 16 + k) * pc.N + col], grad * shared_a[local_row][k]);
        }
        
        barrier();
    }
}