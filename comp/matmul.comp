#version 450
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) readonly buffer InputA {
    float data[];
} inputA;

layout(std430, binding = 1) readonly buffer InputB {
    float data[];
} inputB;

layout(std430, binding = 2) writeonly buffer Output {
    float data[];
} output_buf;

layout(push_constant) uniform PushConstants {
    uint M;  // Height of A
    uint K;  // Width of A / Height of B
    uint N;  // Width of B
} pc;

shared float sharedA[16][16];
shared float sharedB[16][16];

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    uint localRow = gl_LocalInvocationID.y;
    uint localCol = gl_LocalInvocationID.x;

    // Boundary check
    if (row >= pc.M || col >= pc.N) {
        return;
    }

    float sum = 0.0;
    uint numTiles = (pc.K + 15) / 16;

    for (uint t = 0; t < numTiles; t++) {
        // Load data into shared memory with bounds checking
        if (t * 16 + localCol < pc.K) {
            sharedA[localRow][localCol] = inputA.data[row * pc.K + t * 16 + localCol];
        } else {
            sharedA[localRow][localCol] = 0.0;
        }

        if (t * 16 + localRow < pc.K) {
            sharedB[localRow][localCol] = inputB.data[(t * 16 + localRow) * pc.N + col];
        } else {
            sharedB[localRow][localCol] = 0.0;
        }

        barrier();
        memoryBarrierShared();

        // Compute partial dot product
        for (uint k = 0; k < 16 && t * 16 + k < pc.K; k++) {
            sum += sharedA[localRow][k] * sharedB[k][localCol];
        }

        barrier();
        memoryBarrierShared();
    }

    // Store result
    if (row < pc.M && col < pc.N) {
        output_buf.data[row * pc.N + col] = sum;
    }
}