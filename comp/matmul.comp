#version 450
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) readonly buffer InputA {
    float data[];
} inputA;

layout(std430, binding = 1) readonly buffer InputB {
    float data[];
} inputB;

layout(std430, binding = 2) writeonly buffer Output {
    float data[];
} outputC;

layout(push_constant) uniform PushConstants {
    uint M;  // Height of A
    uint K;  // Width of A / Height of B
    uint N;  // Width of B
} pc;

shared float tileA[16][16];
shared float tileB[16][16];

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    uint localRow = gl_LocalInvocationID.y;
    uint localCol = gl_LocalInvocationID.x;

    float sum = 0.0;

    uint numTiles = (pc.K + 15) / 16;

    for (uint t = 0; t < numTiles; t++) {
        uint aIdx = row * pc.K + t * 16 + localCol;
        tileA[localRow][localCol] = (row < pc.M && (t * 16 + localCol) < pc.K) ? inputA.data[aIdx] : 0.0;

        uint bIdx = (t * 16 + localRow) * pc.N + col;
        tileB[localRow][localCol] = ((t * 16 + localRow) < pc.K && col < pc.N) ? inputB.data[bIdx] : 0.0;

        barrier();

        for (uint k = 0; k < 16; k++) {
            sum += tileA[localRow][k] * tileB[k][localCol];
        }

        barrier();
    }

    if (row < pc.M && col < pc.N) {
        uint cIdx = row * pc.N + col;
        outputC.data[cIdx] = sum;
    }
}
