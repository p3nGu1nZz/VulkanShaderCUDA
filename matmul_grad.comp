#version 450
layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) buffer GradOutput {
    float data[];
} gradOut;

layout(binding = 1) buffer InputA {
    float data[];
} inputA;

layout(binding = 2) buffer InputB {
    float data[];
} inputB;

layout(binding = 3) buffer GradA {
    float data[];
} gradA;

layout(binding = 4) buffer GradB {
    float data[];
} gradB;

layout(push_constant) uniform PushConstants {
    uint M;
    uint K;
    uint N;
} pc;

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    if (row >= pc.M || col >= pc.N) return;
    float grad = gradOut.data[row * pc.N + col];
    
    // ∂L/∂a = grad * B
    for (uint k = 0; k < pc.K; ++k) {
        gradA.data[row * pc.K + k] += grad * inputB.data[k * pc.N + col];
    }
    
    // ∂L/∂b = grad * A
    for (uint k = 0; k < pc.K; ++k) {
        gradB.data[k * pc.N + col] += grad * inputA.data[row * pc.K + k];
    }
}
