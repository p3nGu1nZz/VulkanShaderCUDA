// conv2d.comp
#version 450
layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) readonly buffer Input {
    float data[];
} input_buf;

layout(binding = 1) readonly buffer Kernel {
    float data[];
} kernel_buf;

layout(binding = 2) writeonly buffer Output {
    float data[];
} output_buf;

layout(push_constant) uniform constants {
    uint inputWidth;
    uint inputHeight;
    uint inputChannels;
    uint outputChannels;
    uint kernelSize;
} params;

void main() {
    uint outX = gl_GlobalInvocationID.x;
    uint outY = gl_GlobalInvocationID.y;
    uint outChannel = gl_GlobalInvocationID.z;

    uint outputWidth = params.inputWidth - params.kernelSize + 1;
    uint outputHeight = params.inputHeight - params.kernelSize + 1;

    if (outX >= outputWidth || outY >= outputHeight || outChannel >= params.outputChannels) {
        return;
    }

    float sum = 0.0;
    
    for (uint ic = 0; ic < params.inputChannels; ic++) {
        for (uint ky = 0; ky < params.kernelSize; ky++) {
            for (uint kx = 0; kx < params.kernelSize; kx++) {
                uint inX = outX + kx;
                uint inY = outY + ky;
                
                uint inIdx = (inY * params.inputWidth + inX) * params.inputChannels + ic;
                uint kernelIdx = ((outChannel * params.inputChannels + ic) * params.kernelSize + ky) * params.kernelSize + kx;
                
                sum += input_buf.data[inIdx] * kernel_buf.data[kernelIdx];
            }
        }
    }
    
    uint outIdx = (outY * outputWidth + outX) * params.outputChannels + outChannel;
    output_buf.data[outIdx] = sum;
}